CONSTANT 	LED1_PORT, 00
CONSTANT 	LED2_PORT, 01
CONSTANT 	HEX1_PORT, 02
CONSTANT 	HEX2_PORT, 03
CONSTANT 	HEX3_PORT, 04
CONSTANT 	HEX4_PORT, 05
CONSTANT 	RGB1_PORT, 06
CONSTANT 	RGB2_PORT, 07
CONSTANT 	UART_TX_PORT, 08
CONSTANT 	UART_RESET_PORT, 09

CONSTANT 	SW1_PORT, 00
CONSTANT 	SW2_PORT, 01
CONSTANT 	BTN_PORT, 02
CONSTANT 	UART_STATUS_PORT, 03
CONSTANT 	UART_RX_PORT, 04

CONSTANT U_TX_D, 01; 00000001 Tx data_present - bit0
CONSTANT U_TX_H, 02; 00000010 Tx half_full    - bit1
CONSTANT U_TX_F, 04; 00000100 Tx full         - bit2
CONSTANT U_RX_D, 08; 00001000 Rx data_present - bit3
CONSTANT U_RX_H, 10; 00010000 Rx half_full    - bit4
CONSTANT U_RX_F, 20; 00100000 Rx full         - bit5

					ADDRESS	000
	
;prvi zadatak
;START: 	INPUT sB,SW2_PORT
;		INPUT sC, SW1_PORT
;		CALL MNOZI
;		OUTPUT sA, HEX4_PORT
;		JUMP START
;MNOZI: 	LOAD sA, 00
;PETLJA: ADD sA,	sB
;		SUB sC,	01
;		JUMP NZ, PETLJA
;		RETURN


; Drugi zadatak
;START: 	INPUT sB, SW1_PORT
;		INPUT sC, SW2_PORT
;		COMPARE SB, SC
;		CALL C, ZAMJENI
;		CALL MNOZI
;ISPIS: 	OUTPUT sA, HEX4_PORT
;		JUMP START
;ZAMJENI: LOAD s0, sB
;		LOAD sB, sC
;		LOAD sC, s0
;		RETURN
;MNOZI:  LOAD sA, 00
;PETLJA: ADD sA,	sB
;		SUB sC,	01
;		JUMP NZ,PETLJA
;		RETURN

; treci zadatak 

;START: INPUT sD, SW1_PORT
;		INPUT sE, SW2_PORT
;		COMPARE sE,	00
;		CALL NZ, DIJELI
;		OUTPUT sB, HEX3_PORT
;		OUTPUT sA, HEX4_PORT
;		JUMP START
;DIJELI: LOAD sA, sD
;		LOAD sB, 00
;PONOVI: COMPARE sA,	sE
;		RETURN C
;		ADD sB,	01
;		SUB sA,	sE
;		JUMP PONOVI
;		CALL DIJELI	;	sB =	sD /	sE
;		OUTPUT sB,	HEX3_PORT
;		OUTPUT sA,	HEX4_PORT
;		JUMP START

; cetvrti zadatak 

;START:  INPUT s0, SW2_PORT
;		LOAD sB, s0
;		LOAD sC, 10'd  ;	0A
;		CALL MNOZI     ;	sA =	sB *	sC
;		SUB sA,	02
;		LOAD sD, sA    ;	brojnik
;		LOAD sE, 15'd  ;	0F
;		SUB sE,	s0
;		CALL DIJELI	;	sB =	sD /	sE
;		OUTPUT sB,	HEX3_PORT
;		OUTPUT sA,	HEX4_PORT
;		JUMP START
;MNOZI: LOAD sA, 00
;PETLJA: ADD sA,	sB
;		SUB sC,	01
;		JUMP NZ, PETLJA
;		RETURN
;DIJELI: LOAD sA, sD
;		LOAD sB, 00
;PONOVI: COMPARE sA,	sE
;		RETURN C
;		ADD sB,	01
;		SUB sA,	sE
;		JUMP PONOVI
;		CALL DIJELI	;	sB =	sD /	sE
;		OUTPUT sB,	HEX3_PORT
;		OUTPUT sA,	HEX4_PORT
;		JUMP START

;peti zadatak


;START: 	INPUT s0, SW2_PORT
;		INPUT s1, SW1_PORT
;		COMPARE s1,	00
;		JUMP Z,	ISPIS
;PETLJA: SL0 s0
;		SUB s1,	01
;		JUMP NZ, PETLJA
;ISPIS:  OUTPUT s0,	LED2_PORT
;		OUTPUT s0,	HEX4_PORT
;		JUMP START


;sesti zadatak
;START: 	INPUT s0, SW2_PORT
;		AND s0, 0D	
;		XOR s0, 0D
;		JUMP Z, UPALI
;UGASI: 	LOAD s1, 00
;		OUTPUT s1,	LED2_PORT
;		JUMP START
;UPALI: 	LOAD s1, FF
;		OUTPUT s1,	LED2_PORT
;		JUMP START

;sedmi zadatak

ADDRESS 000
START: 	INPUT s0, SW2_PORT
		LOAD s1, s0
		SR0 s1
		SR0 s1
		SR0 s1
		SR0 s1
		LOAD s2, s0
		AND s2, 0F;
;OUTPUT s1, HEX1_PORT
;OUTPUT s2, HEX2_PORT
;JUMP START
		LOAD sB, s1
		LOAD sC, s2
		CALL MNOZI
		OUTPUT sA, LED2_PORT
		LOAD sD, s1
		LOAD sE, s2
		CALL DIJELI
		OUTPUT sB, HEX3_PORT
		OUTPUT sA, HEX4_PORT
		JUMP START
MNOZI: LOAD sA, 00
PETLJA: ADD sA,	sB
		SUB sC,	01
		JUMP NZ, PETLJA
		RETURN
DIJELI: LOAD sA, sD
		LOAD sB, 00
PONOVI: COMPARE sA,	sE
		RETURN C
		ADD sB,	01
		SUB sA,	sE
		JUMP PONOVI
		CALL DIJELI	;	sB =	sD /	sE
		OUTPUT sB,	HEX3_PORT
		OUTPUT sA,	HEX4_PORT
		JUMP START